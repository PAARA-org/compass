# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Tidy Go module
      run: go mod tidy

    - name: Build ARM
      run: GOOS=linux GOARCH=arm GOARM=7 go build -o server_linux_arm ./server.go
    
    - name: Build ARM64
      run: GOOS=linux GOARCH=arm64 go build -o server_linux_arm64 ./server.go

    - name: Test
      run: go test -v ./...


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload ARM Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./server_linux_arm
        asset_name: server_linux_arm
        asset_content_type: application/octet-stream
    
    - name: Upload ARM64 Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./server_linux_arm64
        asset_name: server_linux_arm64
        asset_content_type: application/octet-stream
